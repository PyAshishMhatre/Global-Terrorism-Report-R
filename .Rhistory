ggplot(data=top10_groups_activity, aes(x=decade, y=nr_of_attacks, col=group_name, group= group_name)) +
geom_line(size=1.5, alpha=1) +
theme(legend.position="right")+
labs(title='Terrorist Group activity over decades', x= 'Decades', y ='Number of Attacks') +
scale_color_brewer(name = "Terrorist Groups", palette = 'RdGy') + theme_wsj()
top15_weapons <- us_df_mod %>%
select(year = iyear, weapon_type = weaptype1_txt, decade) %>%
filter(weapon_type != "Unknown") %>%
group_by(decade, weapon_type) %>%
summarise(nr_of_attacks = n(), .groups = 'drop_last') %>%
top_n(n=5, wt=nr_of_attacks) %>%
mutate(percent = nr_of_attacks/sum(nr_of_attacks)*100) %>%
arrange(decade, desc(nr_of_attacks))
ggplot(data=top15_weapons, aes(x=decade, y=percent, col=weapon_type, group= weapon_type)) +
geom_line(size=1.5, alpha=0.9) +
labs(title='Weapon choice of terrorists over time', x= 'Decades', y='Percentage of Use') +
scale_color_brewer(name = "Weapon Types", palette = 'YlOrRd') + theme_wsj()
gun_df <- read.csv("gun-violence-data_01-2013_03-2018.csv")
gun_df_cleaned <- gun_df %>%
select(date, state,n_killed,n_injured)
gun_df_cleaned$date <- ymd(gun_df_cleaned$date)
gun_df_cleaned$date <- year(gun_df_cleaned$date)
gun_df_cleaned <- gun_df_cleaned %>%
group_by(date,state) %>%
summarise(sum_kill = sum(n_killed), sum_injured = sum(n_injured), .groups = 'drop_last' ) %>%
drop_na()
us_terror_grouped <- us_df_mod %>%
select(date = iyear, state = provstate, nkill, nwound ) %>%
group_by(date, state) %>%
summarise(sum_terror_kill = sum(nkill), sum_terror_injured = sum(nwound), .groups = 'drop_last') %>%
drop_na()
df_terror_gun <- inner_join(gun_df_cleaned,us_terror_grouped, by=c('date','state'))
df_terror_gun %>%
select(-state) %>%
group_by(date) %>%
summarise(Gun_Killed = sum(sum_kill), Gun_injured = sum(sum_injured), Attack_kill = sum(sum_terror_kill), Attack_injured = sum(sum_terror_injured)) %>%
drop_na() %>%
pivot_longer(., cols = 2:5, names_to ="violence_type",
values_to = "Count") %>%
ggplot(., aes(fill=violence_type, y=Count, x=date)) +
geom_bar(position="dodge", stat="identity", alpha = 0.7)+
scale_fill_brewer(palette="OrRd",
name="Violence\nType and Result",
breaks=c("Attack_injured", "Attack_kill", "Gun_injured","Gun_Killed"),
labels=c("Terror Attack Injured", "Terror Attack Killed", "Gun Violence Injured","Gun Violence Killed")) +
xlab('Years') + ylab('Number of affected people') + labs(title = 'Comparison of Violence type from Year 2013-2017') + theme_wsj()
df_terror_gun %>%
select(-date) %>%
group_by(state) %>%
summarise(Gun_Killed = sum(sum_kill), Gun_injured = sum(sum_injured), Attack_kill = sum(sum_terror_kill), Attack_injured = sum(sum_terror_injured)) %>%
drop_na() %>%
arrange(desc(Attack_kill)) %>%
slice(1:10) %>%
pivot_longer(., cols = 2:5, names_to ="violence_type",
values_to = "Count") %>%
ggplot(.,aes(x=state,y=Count,fill=violence_type))+
geom_bar(stat="identity", alpha = 0.7)+
coord_polar()+
scale_fill_brewer(palette="OrRd",
name="Violence\nType and Result",
breaks=c("Attack_injured", "Attack_kill", "Gun_injured","Gun_Killed"),
labels=c("Terror Attack Injured", "Terror Attack Killed", "Gun Violence Injured","Gun Violence Killed"))+
xlab("")+
ylab("") + labs(title = 'Comparison of cities with respective to violence type') + theme_wsj()
r_year <- 1970:2017
gdp <- read.csv("gdp_1960_2020.csv", na.strings = "") %>%
filter(year %in% r_year ) %>%
mutate(country_txt = str_replace(country, "the United States", "United States")) %>%
dplyr::select(year, country_txt, gdp)
terror_sub <- gtd_df %>%
dplyr::select(iyear,country_txt, eventid, success) %>%
group_by (iyear, country_txt) %>%
summarise(Total_Attacks = n(), .groups = 'drop_last')
names(gdp)[names(gdp) == "year"] <- 'iyear'
terror_gdp <- inner_join(terror_sub, gdp, by = c("iyear", "country_txt"))
terror_gdp_1 <- terror_gdp %>%
dplyr::select(iyear, country_txt, Total_Attacks, gdp) %>%
filter(country_txt %in% c("United States","Japan","China"," Germany"," France",
"United Kingdom","Italy","Brazil","Canada","India",
"Australia","Spain","Netherlands","Sweden"," Mexico"
))
##feature scaling
terror_gdp_1[,3:4] <- scale(terror_gdp_1[,3:4])
## scatter plot
scale_units <- function(n) {
labs <- ifelse(n < 1000, n, # less than thousands
ifelse(n < 1e6, paste0(round(n/1e3), 'k'), # in thousands
ifelse(n < 1e9, paste0(round(n/1e6), 'M'), # in millions
ifelse(n < 1e12, paste0(round(n/1e9), 'B'), # in billions
ifelse(n < 1e15, paste0(round(n/1e12), 'T'), # in trillions
'too big!'
)))))
return(labs)
}
terror_gdp_sc <- ggplot(terror_gdp_1, aes(x=gdp, y=Total_Attacks))+
geom_point(aes(col= country_txt))+
geom_smooth(formula = y~x, method = "lm", col = "firebrick", se= FALSE)+
scale_x_continuous(labels = scale_units)+
labs(col = "Countries",
title = "GDP vs Total Attacks",
y = "Total Attacks",
x = "GDP in Trillions")+
theme_base()+
#theme(panel.background = element_rect(fill = "#fd9984",
# colour = "#fd9984"))+
theme(plot.title = element_text(size = 14,
face = "bold",
colour = "black",
lineheight = 1.2,
hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12,
face = "bold",
colour = "black")) + theme_wsj()
plot(terror_gdp_sc)
h_2015 <- read.csv("2015.csv", na.strings = "") %>%
dplyr::select(Country, Happiness.Rank, Happiness.Score,
Economy..GDP.per.Capita., Family,
Health..Life.Expectancy., Freedom,
Trust..Government.Corruption.,
Generosity,
Dystopia.Residual)
h_2016 <- read.csv("2016.csv", na.strings = "") %>%
dplyr::select(Country, Happiness.Rank, Happiness.Score,
Economy..GDP.per.Capita., Family,
Health..Life.Expectancy., Freedom,
Trust..Government.Corruption.,
Generosity,
Dystopia.Residual)
h_2017 <- read.csv("2017.csv", na.strings = "") %>%
dplyr::select(Country, Happiness.Rank, Happiness.Score,
Economy..GDP.per.Capita., Family,
Health..Life.Expectancy., Freedom,
Trust..Government.Corruption.,
Generosity,
Dystopia.Residual)
master_happy <- rbind(h_2015, h_2016, h_2017)
means_all <- master_happy %>%
group_by(Country) %>%
summarise(Happiness_Rank = mean(Happiness.Rank),
Happiness_Score = mean(Happiness.Score),
Economy_GDP = mean(Economy..GDP.per.Capita.),
Family = mean(Family),
Health_Life_Exp = mean(Health..Life.Expectancy.),
Freedom = mean(Freedom),
Trust_Government_Corruption = mean(Trust..Government.Corruption.),
Generosity = mean(Generosity),
Dystopia_Residual = mean(Dystopia.Residual))
names(means_all)[names(means_all) == "Country"] <- "country_txt"
terror_subset <- gtd_df %>%
dplyr::select(eventid, country_txt) %>%
group_by(country_txt) %>%
summarise(Total_Attacks = n())
terror_happy <- inner_join(means_all, terror_subset, by = "country_txt")
terror_happy[,2:11] <- scale(terror_happy[,2:11])
income <- read_excel("Income by Country.xlsx", sheet = "Income Index") %>%
dplyr::select(1,27:29) %>%
mutate(Country = str_replace(Country, "Russian Federation", "Russia")) %>%
pivot_longer(cols = 2:4, names_to ="iyear",
values_to = "income_index") %>%
drop_na() %>%
group_by(Country) %>%
summarise(Mean_IncomeIndex = mean(income_index, na.rm =T))
names(income)[names(income) == "Country"] <- "country_txt"
income_subset <- inner_join(income, terror_happy, by = "country_txt" )
income_subset[,2:12] <- scale(income_subset[,2:12])
##Corrplot
cormat_2 <- cor(income_subset[,-1])
cor_inc_attacks <- corrplot(cormat_2, method = "color", COL1(sequential= c('OrRd')),
type = 'lower', order = 'original', addCoef.col = 'black', tl.col = 'black')
mtext("Correlation Plot of All Countries", at=2.5, line=-0.5, cex=2)
attacks <- gtd_df %>%
dplyr::select(eventid, iyear,country_txt) %>%
group_by(iyear, country_txt) %>%
summarise(Total_Attacks = n(), .groups = 'drop_last')
worldmap <- plot_geo(attacks,
locationmode = "country names",
frame = ~iyear) %>%
add_trace(locations = ~country_txt,
z = ~Total_Attacks,
zmin = 0,
zmax = max(attacks$Total_Attacks),
color = ~Total_Attacks,
colors = "OrRd") %>%
layout(title = list(text = "<b> Number of attacks on Countries over 50 Decades </b>", y = 0.98), paper_bgcolor='#fdbb84',
plot_bgcolor='#fdbb84') %>%
config(displayModeBar = FALSE)
worldmap
knitr::opts_chunk$set(echo = TRUE)
#Import Dependencies and set working directory
setwd('C:/Users/Ashish Mhatre/Desktop/CVA/Project_Group 2/IE6600_Sec03_Group02_Hackathon')
library(tidyr)
library(dplyr)
library(lubridate)
library(stringr)
library(imputeTS)
library(ggplot2)
library(magrittr)
library(stringr)
library(extrafont)
library(gridExtra)
library(corrplot)
library(lubridate)
library(ggalluvial)
library(gganimate)
library(ggplot2)
library(dplyr)
library(gapminder)
library(ggthemes)
library(gifski)
library(networkD3)
library(alluvial)
library(ggalluvial)
library(ggridges)
library(viridis)
library(hrbrthemes)
library(wordcloud2)
library(ggwordcloud)
library(tidyr)
library(dplyr)
library(lubridate)
library(stringr)
library(forcats)
library(ggplot2)
library(ggrepel)
library(readxl)
library(tweenr)
library(ggthemes)
library(countrycode)
library(devtools)
library(plotly)
library(corrplot)
library(RColorBrewer)
library(treemapify)
library(wordcloud)
library(wordcloud2)
library(tm)
library(fmsb)
library(igraph)
# Import Global terrorism Dataset
gtd_df <- read.csv('Cleaned_Terror_DF.csv')
gtd_df <- gtd_df[-1]
r_year <- 1970:2017
gdp <- read.csv("gdp_1960_2020.csv", na.strings = "") %>%
filter(year %in% r_year ) %>%
mutate(country_txt = str_replace(country, "the United States", "United States")) %>%
dplyr::select(year, country_txt, gdp)
terror_sub <- gtd_df %>%
dplyr::select(iyear,country_txt, eventid, success) %>%
group_by (iyear, country_txt) %>%
summarise(Total_Attacks = n(), .groups = 'drop_last')
names(gdp)[names(gdp) == "year"] <- 'iyear'
terror_gdp <- inner_join(terror_sub, gdp, by = c("iyear", "country_txt"))
terror_gdp_1 <- terror_gdp %>%
dplyr::select(iyear, country_txt, Total_Attacks, gdp) %>%
filter(country_txt %in% c("United States","Japan","China"," Germany"," France",
"United Kingdom","Italy","Brazil","Canada","India",
"Australia","Spain","Netherlands","Sweden"," Mexico"
))
##feature scaling
terror_gdp_1[,3:4] <- scale(terror_gdp_1[,3:4])
## scatter plot
scale_units <- function(n) {
labs <- ifelse(n < 1000, n, # less than thousands
ifelse(n < 1e6, paste0(round(n/1e3), 'k'), # in thousands
ifelse(n < 1e9, paste0(round(n/1e6), 'M'), # in millions
ifelse(n < 1e12, paste0(round(n/1e9), 'B'), # in billions
ifelse(n < 1e15, paste0(round(n/1e12), 'T'), # in trillions
'too big!'
)))))
return(labs)
}
terror_gdp_sc <- ggplot(terror_gdp_1, aes(x=gdp, y=Total_Attacks))+
geom_point(aes(col= country_txt))+
geom_smooth(formula = y~x, method = "lm", col = "firebrick", se= FALSE)+
scale_x_continuous(labels = scale_units)+
labs(col = "Countries",
title = "GDP vs Total Attacks",
y = "Total Attacks",
x = "GDP in Trillions")+
theme_base()+
#theme(panel.background = element_rect(fill = "#fd9984",
# colour = "#fd9984"))+
theme(plot.title = element_text(size = 14,
face = "bold",
colour = "black",
lineheight = 1.2,
hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12,
face = "bold",
colour = "black")) + theme_wsj()
plot(terror_gdp_sc)
h_2015 <- read.csv("2015.csv", na.strings = "") %>%
dplyr::select(Country, Happiness.Rank, Happiness.Score,
Economy..GDP.per.Capita., Family,
Health..Life.Expectancy., Freedom,
Trust..Government.Corruption.,
Generosity,
Dystopia.Residual)
h_2016 <- read.csv("2016.csv", na.strings = "") %>%
dplyr::select(Country, Happiness.Rank, Happiness.Score,
Economy..GDP.per.Capita., Family,
Health..Life.Expectancy., Freedom,
Trust..Government.Corruption.,
Generosity,
Dystopia.Residual)
h_2017 <- read.csv("2017.csv", na.strings = "") %>%
dplyr::select(Country, Happiness.Rank, Happiness.Score,
Economy..GDP.per.Capita., Family,
Health..Life.Expectancy., Freedom,
Trust..Government.Corruption.,
Generosity,
Dystopia.Residual)
master_happy <- rbind(h_2015, h_2016, h_2017)
means_all <- master_happy %>%
group_by(Country) %>%
summarise(Happiness_Rank = mean(Happiness.Rank),
Happiness_Score = mean(Happiness.Score),
Economy_GDP = mean(Economy..GDP.per.Capita.),
Family = mean(Family),
Health_Life_Exp = mean(Health..Life.Expectancy.),
Freedom = mean(Freedom),
Trust_Government_Corruption = mean(Trust..Government.Corruption.),
Generosity = mean(Generosity),
Dystopia_Residual = mean(Dystopia.Residual))
names(means_all)[names(means_all) == "Country"] <- "country_txt"
terror_subset <- gtd_df %>%
dplyr::select(eventid, country_txt) %>%
group_by(country_txt) %>%
summarise(Total_Attacks = n())
terror_happy <- inner_join(means_all, terror_subset, by = "country_txt")
terror_happy[,2:11] <- scale(terror_happy[,2:11])
income <- read_excel("Income by Country.xlsx", sheet = "Income Index") %>%
dplyr::select(1,27:29) %>%
mutate(Country = str_replace(Country, "Russian Federation", "Russia")) %>%
pivot_longer(cols = 2:4, names_to ="iyear",
values_to = "income_index") %>%
drop_na() %>%
group_by(Country) %>%
summarise(Mean_IncomeIndex = mean(income_index, na.rm =T))
names(income)[names(income) == "Country"] <- "country_txt"
income_subset <- inner_join(income, terror_happy, by = "country_txt" )
income_subset[,2:12] <- scale(income_subset[,2:12])
##Corrplot
cormat_2 <- cor(income_subset[,-1])
cor_inc_attacks <- corrplot(cormat_2, method = "color", COL1(sequential= c('OrRd')),
type = 'lower', order = 'original', addCoef.col = 'black', tl.col = 'black')
mtext("Correlation Plot of All Countries", at=2.5, line=-0.5, cex=2)
setwd('C:/Users/Ashish Mhatre/Desktop/CVA/Project_Group 2/IE6600_Sec03_Group02_Hackathon')
knitr::opts_chunk$set(echo = TRUE)
#Import Dependencies and set working directory
setwd('C:/Users/Ashish Mhatre/Desktop/CVA/Project_Group 2/IE6600_Sec03_Group02_Hackathon')
library(tidyr)
library(dplyr)
library(lubridate)
library(stringr)
library(imputeTS)
library(ggplot2)
library(magrittr)
library(stringr)
library(extrafont)
library(gridExtra)
library(corrplot)
library(lubridate)
library(ggalluvial)
library(gganimate)
library(ggplot2)
library(dplyr)
library(gapminder)
library(ggthemes)
library(gifski)
library(networkD3)
library(alluvial)
library(ggalluvial)
library(ggridges)
library(viridis)
library(hrbrthemes)
library(wordcloud2)
library(ggwordcloud)
library(tidyr)
library(dplyr)
library(lubridate)
library(stringr)
library(forcats)
library(ggplot2)
library(ggrepel)
library(readxl)
library(tweenr)
library(ggthemes)
library(countrycode)
library(devtools)
library(plotly)
library(corrplot)
library(RColorBrewer)
library(treemapify)
library(wordcloud)
library(wordcloud2)
library(tm)
library(fmsb)
library(igraph)
Uncleaned_terror_df <- read.csv("globalterrorismdb_0718dist.csv")
Uncleaned_terror_df <- Uncleaned_terror_df[-c(5,7,17,18,19,31:34,38,40,43,44:58,60:64, 67, 68, 75:81, 86:97, 108, 109, 113:130, 133, 135)]
NA_count <- Uncleaned_terror_df %>% summarise(across(everything(), ~ sum(is.na(.))))
Uncleaned_terror_df <- Uncleaned_terror_df %>% replace_na(list(provstate = "Unknown",
city = "Unknown",
latitude = 0,
longitude = 0,
specificity = 0,
doubtterr = -9 ,
alternative = 6 ,
alternative_txt= 'Unknown Category' ,
targsubtype1= -99 ,
corp1= 'Unkown' ,
natlty1= -99 ,
natlty1_txt= "Unkown" ,
motive= 'Unkown' ,
claimed= -9 ,
claimmode= 'Not Claimed' ,
claimmode_txt='Not Claimed' ,
weapsubtype1= -99,
weapdetail= 'Unkown detail' ,
propextent= -99 ,
propextent_txt = 'Unkown',
ishostkid = 1,
nhostkid = -99,
nhostkidus = 0
))
calc_mode <- function(x){
# List the distinct / unique values
distinct_values <- unique(x)
# Count the occurrence of each distinct value
distinct_tabulate <- tabulate(match(x, distinct_values))
# Return the value with the highest occurrence
distinct_values[which.max(distinct_tabulate)]
}
Uncleaned_terror_df <- Uncleaned_terror_df %>%
mutate(across(c(multiple, guncertain1,
nperps,nperpcap,nkill,nkillus,nkillter,nwound,nwoundus,nwoundte
),~replace_na(.x, calc_mode(.x))))
NA_count_cleaned <- Uncleaned_terror_df %>% summarise(across(everything(), ~ sum(is.na(.))))
write.csv(Uncleaned_terror_df, 'C:/Users/Ashish Mhatre/Desktop/CVA/Project_Group 2/Cleaned_Terror_DF.csv')
# Import Global Terrorism Dataset
gtd_df <- read.csv('Cleaned_Terror_DF.csv')
Uncleaned_terror_df <- read.csv("globalterrorismdb_0718dist.csv")
Uncleaned_terror_df <- Uncleaned_terror_df[-c(5,7,17,18,19,31:34,38,40,43,44:58,60:64, 67, 68, 75:81, 86:97, 108, 109, 113:130, 133, 135)]
NA_count <- Uncleaned_terror_df %>% summarise(across(everything(), ~ sum(is.na(.))))
Uncleaned_terror_df <- Uncleaned_terror_df %>% replace_na(list(provstate = "Unknown",
city = "Unknown",
latitude = 0,
longitude = 0,
specificity = 0,
doubtterr = -9 ,
alternative = 6 ,
alternative_txt= 'Unknown Category' ,
targsubtype1= -99 ,
corp1= 'Unkown' ,
natlty1= -99 ,
natlty1_txt= "Unkown" ,
motive= 'Unkown' ,
claimed= -9 ,
claimmode= 'Not Claimed' ,
claimmode_txt='Not Claimed' ,
weapsubtype1= -99,
weapdetail= 'Unkown detail' ,
propextent= -99 ,
propextent_txt = 'Unkown',
ishostkid = 1,
nhostkid = -99,
nhostkidus = 0
))
calc_mode <- function(x){
# List the distinct / unique values
distinct_values <- unique(x)
# Count the occurrence of each distinct value
distinct_tabulate <- tabulate(match(x, distinct_values))
# Return the value with the highest occurrence
distinct_values[which.max(distinct_tabulate)]
}
Uncleaned_terror_df <- Uncleaned_terror_df %>%
mutate(across(c(multiple, guncertain1,
nperps,nperpcap,nkill,nkillus,nkillter,nwound,nwoundus,nwoundte
),~replace_na(.x, calc_mode(.x))))
NA_count_cleaned <- Uncleaned_terror_df %>% summarise(across(everything(), ~ sum(is.na(.))))
write.csv(Uncleaned_terror_df, 'Cleaned_Terror_DF.csv')
# Import Global Terrorism Dataset
gtd_df <- read.csv('Cleaned_Terror_DF.csv')
gtd_df <- gtd_df[-1]
View(gtd_df)
attacks <- gtd_df %>%
dplyr::select(eventid, iyear,country_txt) %>%
group_by(iyear, country_txt) %>%
summarise(Total_Attacks = n(), .groups = 'drop_last')
worldmap <- plot_geo(attacks,
locationmode = "country names",
frame = ~iyear) %>%
add_trace(locations = ~country_txt,
z = ~Total_Attacks,
zmin = 0,
zmax = max(attacks$Total_Attacks),
color = ~Total_Attacks,
colors = "OrRd") %>%
layout(title = list(text = "<b> Number of attacks on Countries over 50 Decades </b>", y = 0.98), paper_bgcolor='#fdbb84',
plot_bgcolor='#fdbb84') %>%
config(displayModeBar = FALSE)
worldmap
